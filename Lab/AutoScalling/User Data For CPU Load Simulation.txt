#!/bin/bash

# Update system and install required packages
yum update -y
yum install -y python3 python3-pip
pip3 install flask psutil Flask-Cors

# Install stress-ng
amazon-linux-extras enable epel
yum install -y epel-release
yum install -y stress-ng

# Create Flask App
cat << 'EOF' > /home/ec2-user/app.py
from flask import Flask, render_template, jsonify
from flask_cors import CORS
import psutil
import subprocess
import os

app = Flask(__name__, template_folder='/home/ec2-user/templates')
CORS(app)

TARGET_LOAD_FILE = "/home/ec2-user/target_load.txt"
stress_process = None

def get_target_load():
    if os.path.exists(TARGET_LOAD_FILE):
        with open(TARGET_LOAD_FILE, 'r') as f:
            return int(f.read())
    else:
        return 0

def set_target_load(value):
    with open(TARGET_LOAD_FILE, 'w') as f:
        f.write(str(value))

def apply_load(load_percent):
    global stress_process
    subprocess.run(['pkill', '-f', 'stress-ng'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if load_percent > 0:
        stress_process = subprocess.Popen(['stress-ng', '--cpu', '1', '--cpu-load', str(load_percent), '--timeout', '0'])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/cpu_percentage')
def cpu_percentage():
    usage = psutil.cpu_percent(interval=1)
    target = get_target_load()
    return jsonify(cpu=usage, target=target)

@app.route('/increase_load')
def increase_load():
    current = get_target_load()
    new_load = min(100, current + 5)
    set_target_load(new_load)
    apply_load(new_load)
    return jsonify(status='Increased', target=new_load)

@app.route('/decrease_load')
def decrease_load():
    current = get_target_load()
    new_load = max(0, current - 5)
    set_target_load(new_load)
    apply_load(new_load)
    return jsonify(status='Decreased', target=new_load)

@app.route('/reset_load')
def reset_load():
    set_target_load(0)
    apply_load(0)
    return jsonify(status='Reset', target=0)

if __name__ == "__main__":
    set_target_load(0)
    app.run(host='0.0.0.0', port=8080)
EOF

# Create Web UI
mkdir -p /home/ec2-user/templates

cat << 'EOF' > /home/ec2-user/templates/index.html
<!DOCTYPE html>
<html>
<head>
    <title>CPU Load Controller</title>
    <style>
        body { font-family: Arial; text-align: center; }
        .meter {
            height: 20px; background: #555; border-radius: 25px; padding: 10px;
            width: 70%; margin: 20px auto; box-shadow: inset 0 -1px 1px rgba(255,255,255,0.3);
        }
        .meter > span {
            display: block; height: 100%; border-radius: 20px; background-color: #33cc33;
            width: 0%; transition: width 1s;
        }
        button { margin: 5px; padding: 10px 20px; font-size: 16px; }
    </style>
    <script>
        function updateCpuUsage() {
            fetch('/cpu_percentage')
            .then(response => response.json())
            .then(data => {
                const percentage = data.cpu;
                const target = data.target;
                document.getElementById('cpu-percentage-meter').style.width = percentage + '%';
                document.getElementById('cpu-text').innerText = 'Actual Load: ' + percentage + '%';
                document.getElementById('target-text').innerText = 'Target Load: ' + target + '%';
            });
        }

        function adjustLoad(action) {
            fetch('/' + action)
            .then(() => updateCpuUsage());
        }

        setInterval(updateCpuUsage, 2000);
    </script>
</head>
<body onload="updateCpuUsage()">
    <h2>CPU Load Controller</h2>
    <div class="meter"><span id="cpu-percentage-meter"></span></div>
    <p id="cpu-text">Loading...</p>
    <p id="target-text">Target Load: 0%</p>

    <button onclick="adjustLoad('increase_load')">Increase Load (+5%)</button>
    <button onclick="adjustLoad('decrease_load')">Decrease Load (-5%)</button>
    <button onclick="adjustLoad('reset_load')">Reset Load</button>
</body>
</html>
EOF

# Set correct permissions
chown -R ec2-user:ec2-user /home/ec2-user/

# Setup systemd service to auto-start Flask app
cat << 'EOF' > /etc/systemd/system/cpuweb.service
[Unit]
Description=Flask CPU Load Controller
After=network.target

[Service]
User=ec2-user
WorkingDirectory=/home/ec2-user
ExecStart=/usr/bin/python3 /home/ec2-user/app.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Enable and start service
systemctl daemon-reload
systemctl enable cpuweb.service
systemctl start cpuweb.service
